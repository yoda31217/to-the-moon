from datetime import date
import pandas as pd

import streamlit as st
from chart.chart import draw_line_chart
from trade.trade_simulator_result import TradeSimulatorResult

from bot.bot import Bot


def summary(
    symbol: str,
    date_from: date,
    date_to: date,
    bot: Bot,
    result: TradeSimulatorResult,
):
    # values to check (like a test)
    # 'orders=30,049 interval_days=48.0 avg_tick_price_change=0.06 str=Bot0[0.10%, not_inverted]
    # tx_avg_price_margin=1.99 tx_avg_prof=-0.04 tx_cum_prof=-1199.56'

    st.subheader(f"–°–≤–æ–¥–∫–∞")
    st.table(
        pd.DataFrame(
            {
                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                    "–ë–∏—Ä–∂–∞",
                    "–°–∏–º–≤–æ–ª",
                    "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–º—É–ª—è—Ü–∏–∏",
                    "–ë–æ—Ç",
                    "–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Ç–∏–∫",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å",
                    "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–æ–≤–∞—è –º–∞—Ä–∂–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                    "–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                    "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                    "–°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                    "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å",
                    "–ò—Ç–æ–≥–æ–≤—ã–π –æ–±–æ—Ä–æ—Ç",
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    "Binance",
                    symbol,
                    "c {} –ø–æ {} ({:.1f} –¥–Ω–µ–π)".format(
                        date_from, date_to, result.get_interval_days()
                    ),
                    bot,
                    "{:.2f}".format(result.get_average_ticks_price_change()),
                    "{:,}".format(result.get_transactions_count()),
                    "{:,.2f}".format(
                        result.get_transactions_count() / result.get_interval_days()
                    ),
                    "{:,.2f} (–ø–æ –º–æ–¥—É–ª—é)".format(
                        result.get_transactions_average_price_margin()
                    ),
                    "1",
                    "{:,.2f}".format(result.get_transactions_average_profit()),
                    "{:,.2f}".format(result.get_transactions_average_return()),
                    "{:,.2f}".format(result.get_transactions_cumulative_profit()),
                    "{:,.2f}".format(result.get_transactions_cumulative_return()),
                ],
            }
        )
    )


def ticks_chart(ticks: pd.DataFrame):
    st.subheader(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏")
    draw_line_chart(
        ticks,
        "timestamp",
        "ask_price",
        "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, $",
        samples_count=1_000,
    )


def profit_chart(result: TradeSimulatorResult):
    st.subheader(f"–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å")
    if result.get_transactions_count() > 0:
        draw_line_chart(
            result.transactions,
            "open_timestamp",
            "cumulative_profit",
            "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å, $",
            samples_count=10_000,
        )
    else:
        st.text("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π! üòï")
