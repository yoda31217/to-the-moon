import streamlit as st
import pandas as pd
from binance.binance_tick_loader import load_binance_ticks
from bot.bot_0_strategy import Bot0Strategy
from chart.chart import draw_line_chart
from binance.binance_k_line_loader import BINANCE_SYMBOLS
from binance.binance_k_line_loader import load_binance_k_lines
from trade.trade_simulator import TradeSimulator
from datetime import date
from datetime import timedelta

st.set_page_config(
    page_title=f"–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–æ—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ –±–∏—Ä–∂–µ",
    initial_sidebar_state="expanded",
)

st.header(f"–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ –±–æ—Ç–∞")

with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ", expanded=False):
    st.write(
        """
            –ü—Ä–∏–≤–µ—Ç!

            –≠—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–µ–∫—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ë–æ—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ –±–∏—Ä–∂–µ. 

            –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–±–æ–ª—é–¥–∞–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏. 
            –í—Å–µ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–µ–≥–∫–æ–≥–æ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑.

            –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π —Å–∏–º—É–ª—è—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –æ–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

            –í–æ—Ç
            [–∏—Å—Ö–æ–¥–Ω–∏–∫–∏](https://github.com/yoda31217/to-the-moon)
            –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä 
            [—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏](https://github.com/yoda31217/to-the-moon/blob/main/simulator/bot/bot_0_strategy.py)
            –ë–æ—Ç–∞.
        """
    )

st.sidebar.title("–û–ø—Ü–∏–∏")

st.sidebar.header("–†—ã–Ω–æ–∫")

st.sidebar.markdown("**–ë–∏—Ä–∂–∞: Binance**")

symbol: str = str(
    st.sidebar.selectbox(
        "–°–∏–º–≤–æ–ª", options=BINANCE_SYMBOLS, index=BINANCE_SYMBOLS.index("ETHUSDT")
    )
)

date_from_str: str = str(
    st.sidebar.date_input("–î–∞—Ç–∞ '—Å'", date.today() - timedelta(days=2))
)

date_to_str: str = str(
    st.sidebar.date_input("–î–∞—Ç–∞ '–ø–æ'", date.today() - timedelta(days=2))
)

symbol_ask_bid_price_difference = st.sidebar.number_input(
    "–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –∫—É–ø–ª–∏-–ø—Ä–æ–∞–∂–∏", value=0.01
)

st.sidebar.header("Bot")

st.sidebar.markdown("**–ù–∞–∑–≤–∞–Ω–∏–µ: Bot0**")

price_step_ratio = (
    st.sidebar.slider(
        "–®–∞–≥ —Ü–µ–Ω—ã, %",
        min_value=0.1,
        max_value=10.0,
        value=0.1,
        step=0.1,
        help="–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è —Ü–µ–Ω–∞, —á—Ç–æ –±—ã –±–æ—Ç —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ",
    )
    / 100.0
)

inverted = st.sidebar.checkbox(
    "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", value=False, help="–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ"
)

strategy = Bot0Strategy(price_step_ratio, inverted)
k_lines = load_binance_k_lines(symbol, date_from_str, date_to_str)
ticks = load_binance_ticks(k_lines, symbol_ask_bid_price_difference)
result = TradeSimulator(ticks).simulate(strategy)

# 'orders=30,049 interval_days=48.0 avg_tick_price_change=0.06 str=Bot0[0.10%, not_inverted]
# tx_avg_price_margin=1.99 tx_avg_prof=-0.04 tx_cum_prof=-1199.56'

st.subheader(f"–°–≤–æ–¥–∫–∞")
st.table(
    pd.DataFrame(
        {
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                "–ë–∏—Ä–∂–∞",
                "–°–∏–º–≤–æ–ª",
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–º—É–ª—è—Ü–∏–∏",
                "Bot",
                "–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Ç–∏–∫",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å",
                "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–æ–≤–∞—è –º–∞—Ä–∂–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                "–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                "–°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å",
                "–ò—Ç–æ–≥–æ–≤—ã–π –æ–±–æ—Ä–æ—Ç",
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                "Binance",
                symbol,
                "c {} –ø–æ {} ({:.1f} –¥–Ω–µ–π)".format(
                    date_from_str, date_to_str, result.get_interval_days()
                ),
                strategy,
                "{:.2f}".format(result.get_average_ticks_price_change()),
                "{:,}".format(result.get_transactions_count()),
                "{:,.2f}".format(
                    result.get_transactions_count() / result.get_interval_days()
                ),
                "{:,.2f} (–ø–æ –º–æ–¥—É–ª—é)".format(
                    result.get_transactions_average_price_margin()
                ),
                "1",
                "{:,.2f}".format(result.get_transactions_average_profit()),
                "{:,.2f}".format(result.get_transactions_average_return()),
                "{:,.2f}".format(result.get_transactions_cumulative_profit()),
                "{:,.2f}".format(result.get_transactions_cumulative_return()),
            ],
        }
    )
)


st.subheader(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏")
draw_line_chart(
    ticks,
    "timestamp",
    "ask_price",
    "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, $",
    samples_count=1_000,
)

st.subheader(f"–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å")
if result.get_transactions_count() > 0:
    draw_line_chart(
        result.transactions,
        "open_timestamp",
        "cumulative_profit",
        "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å, $",
        samples_count=10_000,
    )
else:
    st.text("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π! üòï")
