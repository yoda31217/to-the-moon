import datetime
import sys
import streamlit as st
import pandas as pd
from binance.binance_tick_loader import load_binance_ticks
from bot.bot_0_strategy import Bot0Strategy
from chart.chart import draw_line_chart
from binance.binance_k_line_loader import _load_binance_k_lines_data_frame
from binance.binance_k_line_loader import BINANCE_SYMBOLS
from trade.trade_simulator import TradeSimulator
from datetime import date
from datetime import timedelta

# Options

st.sidebar.header("–û–ø—Ü–∏–∏")

st.sidebar.subheader("–°—Ç—Ä–∞—Ç–µ–≥–∏—è: Bot0")

symbol = st.sidebar.selectbox(
    "–°–∏–º–≤–æ–ª", options=BINANCE_SYMBOLS, index=BINANCE_SYMBOLS.index("ETHUSDT")
)

date_from_str = st.sidebar.date_input("–î–∞—Ç–∞ —Å", date.today() - timedelta(days=2))

date_to_str = st.sidebar.date_input("–î–∞—Ç–∞ –ø–æ", date.today() - timedelta(days=2))

date_strs = (
    pd.date_range(date_from_str, date_to_str, freq="d").strftime("%Y-%m-%d").to_list()
)

symbol_ask_bid_price_difference = st.sidebar.number_input(
    "–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –∫—É–ø–ª–∏-–ø—Ä–æ–∞–∂–∏", value=0.01
)

price_step_ratio = (
    st.sidebar.slider(
        "–®–∞–≥ —Ü–µ–Ω—ã, %",
        min_value=0.1,
        max_value=10.0,
        value=0.1,
        step=0.1,
        help="–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω–∞, —á—Ç–æ –±—ã –±–æ—Ç —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ",
    )
    / 100.0
)

inverted = st.sidebar.checkbox(
    "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", value=False, help="–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É"
)

strategy = Bot0Strategy(price_step_ratio, inverted)


@st.cache_data
def load_binance_k_lines_with_cache(symbol: str, iso_date_str: str) -> pd.DataFrame:
    return _load_binance_k_lines_data_frame(
        f"https://data.binance.vision/data/spot/daily/klines/{symbol}/1s/{symbol}-1s-{iso_date_str}.zip"
    )


k_lines = pd.concat(
    [load_binance_k_lines_with_cache(symbol, date_str) for date_str in date_strs]
).sort_values(by=["open_timestamp_millis"])

ticks = load_binance_ticks(k_lines, symbol_ask_bid_price_difference)
result = TradeSimulator(ticks).simulate(strategy)

# Body

st.header(f"–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ –±–æ—Ç–∞")


st.text("Description1")

# 'orders=30,049 interval_days=48.0 avg_tick_price_change=0.06 str=Bot0[0.10%, not_inverted]
# tx_avg_price_margin=1.99 tx_avg_prof=-0.04 tx_cum_prof=-1199.56'

# 03/01 - -16.09 - 431 - 0.1%

st.subheader(f"–°–≤–æ–¥–∫–∞")
st.table(
    pd.DataFrame(
        {
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                "–°–∏–º–≤–æ–ª",
                "–î–∞–Ω–Ω—ã–µ",
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω",
                "–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Ç–∏–∫",
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–º—É–ª—è—Ü–∏–∏",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å",
                "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–æ–≤–∞—è –º–∞—Ä–∂–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å",
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                symbol,
                "Binance",
                strategy,
                "–î–∞" if inverted else "–ù–µ—Ç",
                "{:.2f}".format(result.get_average_ticks_price_change()),
                "c {} –ø–æ {} ({:.1f} –¥–Ω–µ–π)".format(date_from_str, date_to_str, result.get_interval_days()),
                result.get_transactions_count(),
                "{:.2f}".format(result.get_transactions_count() / result.get_interval_days()),
                "{:.2f}".format(result.get_transactions_average_price_margin()),
                "{:.2f}".format(result.get_transactions_average_profit()),
                "{:.2f}".format(result.get_transactions_cumulative_profit()),
            ],
        }
    )
)


st.subheader(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏")
draw_line_chart(
    ticks,
    "timestamp",
    "ask_price",
    "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, $",
    samples_count=1000,
)

st.subheader(f"–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å")
if result.get_transactions_count() > 0:
    draw_line_chart(
        result.transactions,
        "open_timestamp",
        "cumulative_profit",
        "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å, $",
        samples_count=1000000,
    )
else:
    st.text("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π! üòï")
