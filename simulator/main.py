from datetime import date, timedelta
from typing import cast
import streamlit as st
from binance.binance_k_line_loader import BINANCE_SYMBOLS, load_binance_k_lines
from binance.binance_tick_loader import load_binance_ticks

from bot.bot_0_strategy import Bot0Strategy
from report.report import report_profit_chart, report_summary, report_ticks_chart
from trade.trade_simulator import TradeSimulator

st.set_page_config(
    page_title=f"–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–æ—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ –±–∏—Ä–∂–µ",
    initial_sidebar_state="expanded",
)

st.header(f"–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ –±–æ—Ç–∞")

# with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ", expanded=False):
#     st.write(
#         """
#             –ü—Ä–∏–≤–µ—Ç!

#             –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –ë–æ—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ –±–∏—Ä–∂–µ Binance. 

#             –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–±–æ–ª—é–¥–∞–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏. 
#             –í—Å–µ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–µ–≥–∫–æ–≥–æ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑.

#             –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π —Å–∏–º—É–ª—è—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –æ–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

#             –ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π. –í–æ—Ç
#             [–∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–∞ GitHub](https://github.com/yoda31217/to-the-moon)
#             –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä 
#             [—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–æ—Ç–∞](https://github.com/yoda31217/to-the-moon/blob/main/simulator/bot/bot_0_strategy.py).
#         """
#     )

st.sidebar.title("–û–ø—Ü–∏–∏")

st.sidebar.header("–†—ã–Ω–æ–∫")

st.sidebar.markdown("**–ë–∏—Ä–∂–∞: Binance**")

symbol: str = str(
    st.sidebar.selectbox(
        "–°–∏–º–≤–æ–ª", options=BINANCE_SYMBOLS, index=BINANCE_SYMBOLS.index("ETHUSDT")
    )
)

date_from: date = cast(
    date, st.sidebar.date_input("–î–∞—Ç–∞ —Å", date.today() - timedelta(days=2))
)

date_to: date = cast(
    date, st.sidebar.date_input("–î–∞—Ç–∞ –ø–æ", date.today() - timedelta(days=2))
)

symbol_ask_bid_price_difference = st.sidebar.number_input(
    "–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –∫—É–ø–ª–∏-–ø—Ä–æ–∞–∂–∏", value=0.01
)

st.sidebar.header("Bot")

st.sidebar.markdown("**–ù–∞–∑–≤–∞–Ω–∏–µ: Bot0**")

price_step_ratio = (
    st.sidebar.slider(
        "–®–∞–≥ —Ü–µ–Ω—ã, %",
        min_value=0.1,
        max_value=10.0,
        value=1.0,
        step=0.1,
        help="–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è —Ü–µ–Ω–∞, —á—Ç–æ –±—ã –±–æ—Ç —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ",
    )
    / 100.0
)

inverted = st.sidebar.checkbox(
    "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", value=False, help="–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ"
)

try:
    strategy = Bot0Strategy(price_step_ratio, inverted)
    k_lines = load_binance_k_lines(symbol, date_from, date_to)
    ticks = load_binance_ticks(k_lines, symbol_ask_bid_price_difference)
    result = TradeSimulator(ticks).simulate(strategy)

    report_summary(symbol, date_from, date_to, strategy, result)
    report_ticks_chart(ticks)
    report_profit_chart(result)

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞: {str(e)}", icon="üö®")
